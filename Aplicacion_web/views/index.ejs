<!doctype html>
<!--
* Tabler - Premium and Open Source dashboard template with responsive and high quality UI.
* @version 1.0.0-beta10
* @link https://tabler.io
* Copyright 2018-2022 The Tabler Authors
* Copyright 2018-2022 codecalm.net PaweÅ‚ Kuna
* Licensed under MIT (https://github.com/tabler/tabler/blob/master/LICENSE)
-->
<html lang="en">
  <%- include('partials/head'); %>
  <body >
    <div class="page">
      <%- include('partials/header'); %>
      <div class="page-wrapper">
        <div class="container-xl">
          <!-- Page title -->
          
        </div>
        <div class="page-body">
          <div class="container-xl">
            <div class="row row-deck row-cards" >
              <div class="card">
                <div class="card-body">
                  <h3 class="card-title">Sistema de Prevencion de desastres Naturales Costa Rica</h3>
                  <div id="map"></div>
                </div>
                <div class="card-title">
                  <select class="form-select form-select-sm" name="select-location" id="select-location" aria-label=".form-select-lg example">
                    <option value="-1">Seleccione su Localidad:</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="card-body">
              <div class="row g-2 align-items-center mb-n3">
                <div class="col-12 col-xl-2 mb-3 font-weight-semibold">Normal</div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a id= alarmI class="btn btn-primary w-100">
                    Alarma I
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a id= alarmII class="btn btn-secondary w-100">
                    Alarma II
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a id=pushAlarm class="btn btn-success w-100">
                    Success
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a href="#" class="btn btn-warning w-100">
                    Warning
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a href="#" class="btn btn-danger w-100">
                    Danger
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a href="#" class="btn btn-info w-100">
                    Info
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a href="#" class="btn btn-light w-100">
                    Light
                  </a>
                </div>
                <div class="col-6 col-sm-4 col-md-2 col-xl mb-3">
                  <a href="#" class="btn btn-dark w-100">
                    Dark
                  </a>
                </div>
              </div>
            </div>
            <div class="col-12">
              <div class="row row-cards">
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-blue text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/currency-dollar -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2" /><path d="M12 3v3m0 12v3" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            132 Sales
                          </div>
                          <div class="text-muted">
                            12 waiting payments
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-green text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/shopping-cart -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="6" cy="19" r="2" /><circle cx="17" cy="19" r="2" /><path d="M17 17h-11v-14h-2" /><path d="M6 5l14 1l-1 7h-13" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            78 Orders
                          </div>
                          <div class="text-muted">
                            32 shipped
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-twitter text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/brand-twitter -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            623 Shares
                          </div>
                          <div class="text-muted">
                            16 today
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-facebook text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/brand-facebook -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 10v4h3v7h4v-7h3l1 -4h-4v-2a1 1 0 0 1 1 -1h3v-4h-3a5 5 0 0 0 -5 5v2h-3" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            132 Likes
                          </div>
                          <div class="text-muted">
                            21 today
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
        </div>
      </div>
      <%- include('partials/footer'); %>
    </div>
    <!-- Libs JS -->
    <!-- Tabler Core -->
    <script src="./dist/js/tabler.min.js" defer></script>
    <script src="./dist/js/demo.min.js" defer></script>
 

    <script src="socket.io/socket.io.js"> </script>
<script>
// Socket IO para comunicacion con el servidor en tiempo real
  const socket = io();
////////////////////////////////////////////////////////////////

// Funcionalidad de los botones con socket
  let bottonAlarmI = document.getElementById("alarmI");
  bottonAlarmI.addEventListener('click', async () => {
      const response = await fetch('/dis', {method: 'POST'});
      const data = await response.json();
      bottonAlarmI.textContent = data.count;
      socket.emit("alarmI:update");             // Emitimos evento hacia el cliente
    });

  let bottonAlarmII = document.getElementById("alarmII");
  bottonAlarmII.addEventListener('click', async() => {
      socket.emit("alarmII:update");             // Emitimos evento hacia el cliente
    });

  let pushAlarm = document.getElementById("pushAlarm");
  pushAlarm.addEventListener('click', async() => {
      socket.emit("push:Alarm");             // Emitimos evento hacia el cliente
    });
////////////////////////////////////////////////////////////////

// Actualiza el contenido de un boton como ejemplo
  socket.on("alarmI:update", data => {
    bottonAlarmI.textContent = data;
    });
////////////////////////////////////////////////////////////////////

// Capas base mapas URLs
  var mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>';
  var mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

  var layerRiosCR = 'https://services5.arcgis.com/4u1m1BBDkNDTVWsd/arcgis/rest/services/Rios_de_Costa_Rica/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'
////////////////////////////////////////////////////////////////////

// Cargamos capas mapas base
  var streets = L.tileLayer(mbUrl, {id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr});
  var satellite = L.tileLayer(mbUrl, {id: 'mapbox/satellite-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr});
  var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  });
////////////////////////////////////////////////////////////////////

// Variables para cargar las capas en variables intermedias para control de capas de forma dinamica
  var layerSensors = L.layerGroup();
  var layerAlarms = L.layerGroup();
  var layerStationImn = L.layerGroup();
  var layerDistric = L.layerGroup();
  var layerRiver = L.layerGroup();
////////////////////////////////////////////////////////////////////

// Iconos personalizados
  var stationIcon = new L.icon({
    iconUrl: 'icons/icons8-weather-64.png',
    iconSize:     [20, 20],
    iconAnchor:   [10, 10],
  });

  var sensorIcon = new L.icon({
    iconUrl: 'icons/icons8-sensor-64.png',
    iconSize:     [30, 30],
    iconAnchor:   [15, 15],
  });
  
  var vibrationIcon = new L.icon({
    iconUrl: 'icons/icons8-avalanche-50.png',
    iconSize:     [30, 30],
    iconAnchor:   [15, 15],
  });

  var alarmIcon = new L.icon({
    iconUrl: 'icons/icons8-button-48.png',
    iconSize:     [30, 30],
    iconAnchor:   [15, 15],
  });
////////////////////////////////////////////////////////////////////


// Obtener ID de selector para navegacion entre los diferentes puntos de interes. Abajo se cargaran las distintas opciones
  var selectIoT = document.getElementById('select-location');

// Configurar evento que nos desplaza hasta el punto seleccionado en el mapa
  document.getElementById('select-location').addEventListener('change',function(ubication){
    let coords = ubication.target.value.split(",");
    map.flyTo([coords[1],coords[0]],13);});
////////////////////////////////////////////////////////////////////
//Iteramos todos los dispositivos guardados en la base de datos
  var geoJsonDevices = <%- JSON.stringify(devices); %>    //Cargamos desde la base de datos

  for (device of geoJsonDevices){

    var opt = document.createElement('option');
    opt.value = device.geometry.coordinates;
    opt.innerHTML = device.properties.location;
    selectIoT.appendChild(opt);               // Se agrega cada locacion al selector

    // Se asigna un icono diferente de acuerdo al tipo de dispositivo cargado
    if (device.properties.parameter == "waterLevel"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: sensorIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerSensors);
    }else if(device.properties.parameter == "vibration"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: vibrationIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerSensors);
    }else if(device.properties.parameter == "sound"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: alarmIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerAlarms);
    }
    ////////////////////////////////////////////////////////////////////
  } // Fin iteracion de los dispositivos

////////////////////////////////////////////////////////////////////
// Iteramos todas las estaciones IMN guardadas en la base de datos
  var geoJsonImn_station = <%- JSON.stringify(imn); %>    //Cargamos los puntos 

  for (station of geoJsonImn_station){    // Iteramos cada una de las estaciones automaticas IMN Localizadas
    marker = new L.marker([station.geometry.coordinates[1], station.geometry.coordinates[0]],{icon: stationIcon}).bindPopup(`
    <h6>Estacion: ${station.properties.name}</h6><br>
    <a href="${station.properties.url}">Condiciones Actuales</a>
    `).addTo(layerStationImn)
  }// Fin de la iteracion de estaciones IMN

//////////////////////////////////////////////////////////////////////
// Carga de capa GeoJson
  async function addGeoJson() {
    const distritos = await fetch("layers/distritos.geojson");
    const dataDistritos = await distritos.json();
    L.geoJson(dataDistritos).addTo(layerDistric);
  }
  addGeoJson();

  async function addRiver() {
    const rivers = await fetch(layerRiosCR);
    const dataRiver = await rivers.json();
    L.geoJson(dataRiver).addTo(layerRiver);
      }
  addRiver();

//////////////////////////////////////////////////////////////////////
// Creamos el mapa camvas
  var map = L.map('map', {
    center: [09.92, -84.07],
    zoom: 8,
    layers: [osm, layerSensors],
    });

// Definicos el selector de capas en el mapa
  var baseLayers = {
    'OpenStreetMap': osm,
    'Streets': streets,
    'Satellite': satellite,
  };
  var overlays = {
    'Monitores Iot': layerSensors,
    'Alarmas Notificadoras': layerAlarms,
    'Estaciones Automaticas IMN': layerStationImn,
    'Rios CR': layerRiver,
    'Distritos': layerDistric,
  };
//////////////////////////////////////////////////////////////////////
// Cargamos el selector de capas al mapa
  var layerControl = L.control.layers(baseLayers, overlays).addTo(map);


// Evento a configurar cuando el servidor lance un emit
  socket.on("map:update", () => {
    var polygon = L.polygon([
      [10.06, -84.01],
      [10.18, -84.06],
      [10.10, -84.147]
      ]).addTo(map).bindPopup('Zona de Riesgo');
    });

// Funcionalidad cuando hacemos click mostramos las coordenadas en un popup
  function onMapClick(e) {
    var popup = L.popup();
    popup.setLatLng(e.latlng).setContent('Has hecho clip en ' + e.latlng.toString()).openOn(map);
    }

//Captura del evento click en el mapa
  map.on('click', onMapClick);
// Fin del jscript
</script> 

  </body>
</html>