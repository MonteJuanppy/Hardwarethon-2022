<!doctype html>
<html lang="en">
 
    <%- include('partials/head'); %>
  

  <body>
    <div class="page">
      <%- include('partials/header'); %>
      <div class="page-wrapper">
        <div class="container-xl">
          <!-- Page title -->
          
        </div>
        <div class="page-body">
          <div class="container-xl">

            <div class="col-12">
              <div class="row row-cards">
                <div class="col-sm-6 col-lg-6">
                  <div class="card">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="card chart-container">
                          <h3 class="h1">Monitor de Niveles</h3>
                          <div id="local_map"></div>
                          <div class="card-title">
                            <select class="form-select form-select-sm" name="select-location" id="select-location" aria-label=".form-select-lg example">
                              <option value="-1">Seleccione su Localidad:</option>
                            </select>
                          </div>
                        </div>
                      </div>  
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-6">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="card chart-container">
                          <canvas id="chart"></canvas>
                          <div class="card-title">
                            <button id=pushAlarm type="button" class="btn btn-danger"><span class="cil-contrast btn-icon mr-2"></span>Disparar Alarma</button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-12">
              <div class="row row-cards">
                <div class="col-8">
                  <figure class="highcharts-figure">
                    <div id="container">
                        <div id="loading">
                          <i class="fa fa-spinner fa-spin"></i> Loading data from external source
                        </div>
                    </div>
                  </figure>
                </div>
                <div class="col-4">
                  <div class="card card-sm">
                    <div class="card-body">
                      Foto de dispositivo
                    </div>
                  </div>
                </div>
              </div>
            </div>
                    
            <div class="col-12">
              <div class="row row-cards">
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-blue text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/currency-dollar -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2" /><path d="M12 3v3m0 12v3" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            132 Sales
                          </div>
                          <div class="text-muted">
                            12 waiting payments
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-green text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/shopping-cart -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="6" cy="19" r="2" /><circle cx="17" cy="19" r="2" /><path d="M17 17h-11v-14h-2" /><path d="M6 5l14 1l-1 7h-13" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            78 Orders
                          </div>
                          <div class="text-muted">
                            32 shipped
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-twitter text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/brand-twitter -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            623 Shares
                          </div>
                          <div class="text-muted">
                            16 today
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-sm-6 col-lg-3">
                  <div class="card card-sm">
                    <div class="card-body">
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <span class="bg-facebook text-white avatar"><!-- Download SVG icon from http://tabler-icons.io/i/brand-facebook -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 10v4h3v7h4v-7h3l1 -4h-4v-2a1 1 0 0 1 1 -1h3v-4h-3a5 5 0 0 0 -5 5v2h-3" /></svg>
                          </span>
                        </div>
                        <div class="col">
                          <div class="font-weight-medium">
                            132 Likes
                          </div>
                          <div class="text-muted">
                            21 today
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
        </div>
      </div>
      <%- include('partials/footer'); %>
    </div>
     <!-- Libs JS -->
    <!-- Tabler Core -->
    <script src="./dist/js/tabler.min.js" defer></script>
    <script src="./dist/js/demo.min.js" defer></script>
   

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.js"> </script>
<script src="socket.io/socket.io.js"> </script>

<script>
// Cargamos identificador del elemento en pagina para el grafico
  const ctx = document.getElementById("chart").getContext('2d');

// Variables para establecer los colores del grafico de acuerdo al dato que llega
  var colorChart = [
    'rgba(161, 198, 247, 1)',
    'rgba(255, 244, 0, 0.85)',
    'rgba(255, 0, 0, 0.9)',
  ]

// Creamos el grafico y le cargamos los ultimos datos que nos regresa la base de datos
  const waterLevelChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: <%- JSON.stringify(labels); %>,
      datasets: [{label: 'Levels',
                  backgroundColor: colorChart[0], 
                  borderColor: 'rgb(47, 128, 237)', 
                  data: <%- JSON.stringify(data); %>,
        }]
    },
    options: {
      scales: { yAxes: [{ ticks: { beginAtZero: true, }}]}
    },
  });

/////////////////////////////////////////////////////////////////////////////////////
// Socket IO
  const socket = io();

// Creamos un evento de enviar alarma
  let pushAlarm = document.getElementById("pushAlarm");
  pushAlarm.addEventListener('click', async() => {
      socket.emit("push:Alarm");             // Emitimos evento hacia el cliente
  });

// Actualizamos el grafico en tiempo real son socket IO
  socket.on("db:update", function(data) {
    //console.log("mqttRes", data)
    let today = new Date(data.timestamp)
    let time = (today.getHours())+":"+(today.getMinutes()+":"+(today.getSeconds()))

    if(data.topic.hot_point == "tempisque" && data.topic.parameter == "waterLevel"){  // Filtro que los datos sean segun su correspondencia
      if(waterLevelChart.data.labels.length != 15) {
        waterLevelChart.data.labels.push(time);  //Agregamos dato eje X
        waterLevelChart.data.datasets.forEach((dataset) => {
          dataset.data.push(data.data); //Agregar informacion al eje Y

          if (data.data > 15){          //Cambiamos el color del grafico segun el dato entrante
            dataset.backgroundColor = colorChart[2];
          }
          else if(data.data <= 15 && data.data > 10){
            dataset.backgroundColor = colorChart[1];
          }
          else{dataset.backgroundColor = colorChart[0];}
        });
      }
      else {                            // En caso que se tengan mas de 15 datos graficados, elimina el ultimo dato
        waterLevelChart.data.labels.shift(); //Remover el ultimo dato
        waterLevelChart.data.labels.push(data.time); //Agregamos dato eje X
        waterLevelChart.data.datasets.forEach((dataset) => {
          dataset.data.shift(); //Removemos ultimo dato
          dataset.data.push(data.data); //Agregamos dato eje Y
          if (data.data > 15){          // Colores del grafico
            dataset.backgroundColor = colorChart[2];
          }
          else if(data.data <= 15 && data.data > 10){
            dataset.backgroundColor = colorChart[1];
          }
          else{dataset.backgroundColor = colorChart[0];}
          }
        );
      }
    waterLevelChart.update();         //Actualizamos grafico
    }else{console.log("not data for this page")}    // Mostramos si el dato recibido no corresponde a la pagina en vista
  });

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Capas base mapas URLs
var mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>';
  var mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

  var layerRiosCR = 'https://services5.arcgis.com/4u1m1BBDkNDTVWsd/arcgis/rest/services/Rios_de_Costa_Rica/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'
////////////////////////////////////////////////////////////////////

// Cargamos capas mapas base
  var streets = L.tileLayer(mbUrl, {id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1, attribution: mbAttr});
  var satellite = L.tileLayer(mbUrl, {id: 'mapbox/satellite-v9', tileSize: 512, zoomOffset: -1, attribution: mbAttr});
  var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  });
////////////////////////////////////////////////////////////////////

// Variables para cargar las capas en variables intermedias para control de capas de forma dinamica
  var layerSensors = L.layerGroup();
  var layerAlarms = L.layerGroup();
  var layerStationImn = L.layerGroup();
  var layerDistric = L.layerGroup();
  var layerRiver = L.layerGroup();
  
  var markers = [];         // Capa de marcas de estado de dispositivos en linea
  var onoffSensors = false;
////////////////////////////////////////////////////////////////////

// Creamos el mapa camvas
var map = L.map('local_map', {
    center: [10.400702, -85.538121],
    zoom: 11,
    layers: [osm, layerSensors, layerAlarms],
    });

    // Iconos personalizados
  var stationIcon = new L.icon({
    iconUrl: 'icons/icons8-weather-64.png',
    iconSize:     [20, 20],
    iconAnchor:   [10, 10],
  });

  var sensorIcon = new L.icon({
    iconUrl: 'icons/icons8-sensor-64.png',
    iconSize:     [30, 30],
    iconAnchor:   [15, 15],
  });
  
  var vibrationIcon = new L.icon({
    iconUrl: 'icons/icons8-avalanche-50.png',
    iconSize:     [30, 30],
    iconAnchor:   [15, 15],
  });

  var alarmIcon = new L.icon({
    iconUrl: 'icons/icons8-button-48.png',
    iconSize:     [15, 15],
    iconAnchor:   [15, 15],
  });

  var circleGreen = new L.icon({
    iconUrl: 'icons/icons8-green-circle-48.png',
    iconSize:     [12, 12],
    iconAnchor:   [25, 15],
  });

  var squareRed = new L.icon({
    iconUrl: 'icons/icons8-red-square-48.png',
    iconSize:     [12, 12],
    iconAnchor:   [25, 15],
  });
////////////////////////////////////////////////////////////////////

// Obtener ID de selector para navegacion entre los diferentes puntos de interes. Abajo se cargaran las distintas opciones
  var selectIoT = document.getElementById('select-location');

// Configurar evento que nos desplaza hasta el punto seleccionado en el mapa
  document.getElementById('select-location').addEventListener('change',function(ubication){
    let coords = ubication.target.value.split(",");
    map.flyTo([coords[1],coords[0]],13);});
////////////////////////////////////////////////////////////////////
//Iteramos todos los dispositivos guardados en la base de datos
  var geoJsonDevices = <%- JSON.stringify(devices); %>    //Cargamos desde la base de datos

  for (device of geoJsonDevices){

    var opt = document.createElement('option');
    opt.value = device.geometry.coordinates;
    opt.innerHTML = device.properties.location;
    selectIoT.appendChild(opt);               // Se agrega cada locacion al selector

    // Se asigna un icono diferente de acuerdo al tipo de dispositivo cargado
    if (device.properties.parameter == "waterLevel"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: sensorIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerSensors);

    }else if(device.properties.parameter == "vibration"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: vibrationIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerSensors);

    }else if(device.properties.parameter == "sound"){
      marker = new L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: alarmIcon}).bindPopup(`
        Localizacion: ${device.properties.location} <br>
        Tipo de dispositivo: <b>${device.properties.type_device}</b> <br>
        <a href="${device.properties.url}">Condiciones Actuales</a>
        `).addTo(layerAlarms);

    }

    ////////////////////////////////////////////////////////////////////
  } // Fin iteracion de los dispositivos

  //Iniciamos Funcion visualizacion de estado en linea de dispositivos
  visualStateSensor();

  ////////////////////////////////////////////////////////////////////
// Iteramos todas las estaciones IMN guardadas en la base de datos
  var geoJsonImn_station = <%- JSON.stringify(imn); %>    //Cargamos los puntos 

  for (station of geoJsonImn_station){    // Iteramos cada una de las estaciones automaticas IMN Localizadas
    marker = new L.marker([station.geometry.coordinates[1], station.geometry.coordinates[0]],{icon: stationIcon}).bindPopup(`
    <h6>Estacion: ${station.properties.name}</h6><br>
    <a href="${station.properties.url}">Condiciones Actuales</a>
    `).addTo(layerStationImn)
  }// Fin de la iteracion de estaciones IMN

//////////////////////////////////////////////////////////////////////
// Carga de capa GeoJson
  async function addGeoJson() {
    const distritos = await fetch("layers/distritos.geojson");
    const dataDistritos = await distritos.json();
    L.geoJson(dataDistritos).addTo(layerDistric);
  }
  addGeoJson();

  async function addRiver() {
    const rivers = await fetch(layerRiosCR);
    const dataRiver = await rivers.json();
    L.geoJson(dataRiver).addTo(layerRiver);
      }
  //addRiver();

//////////////////////////////////////////////////////////////////////

// Definicos el selector de capas en el mapa
  var baseLayers = {
    'OpenStreetMap': osm,
    'Streets': streets,
    'Satellite': satellite,
  };

  var overlays = {
    'Monitores Iot': layerSensors,
    'Alarmas Notificadoras': layerAlarms,
    'Estaciones Automaticas IMN': layerStationImn,
    'Rios CR': layerRiver,
    'Distritos': layerDistric,
  };
//////////////////////////////////////////////////////////////////////
// Cargamos el selector de capas al mapa
  var layerControl = L.control.layers(baseLayers, overlays).addTo(map);

  function visualStateSensor(){
    if (onoffSensors == true){
      for (sensor of markers){
        map.removeLayer(sensor)
        }
      onoffSensors = false;
      }
    else{
      for (device of geoJsonDevices){
        var startDate = new Date(device.properties.update);
        var endDate   = new Date();
        var seconds = Math.round(((endDate.getTime() - startDate.getTime()) / 1000) / 60);
      
        if (seconds > 10){
          mark = L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: squareRed}).addTo(map);
          markers.push(mark);
        }else{
          mark = L.marker([device.geometry.coordinates[1], device.geometry.coordinates[0]],{icon: circleGreen}).addTo(map);
          markers.push(mark);
        }
      }
      onoffSensors = true;
    }
    setTimeout(() => {
      visualStateSensor();
      }, 5000);
  }

// Evento a configurar cuando el servidor lance un emit
  socket.on("map:update", () => {
    var polygon = L.polygon([
      [10.06, -84.01],
      [10.18, -84.06],
      [10.10, -84.147]
    ]).addTo(map).bindPopup('Zona de Riesgo');
  });

// Funcionalidad cuando hacemos click mostramos las coordenadas en un popup
  function onMapClick(e) {
    var popup = L.popup();
    popup.setLatLng(e.latlng).setContent('Has hecho clip en ' + e.latlng.toString()).openOn(map);
    }

//Captura del evento click en el mapa
  map.on('click', onMapClick);
// Fin del jscript
</script>

<script>
  /**
   * This is a complex demo of how to set up a Highcharts chart, coupled to a
   * dynamic source and extended by drawing image sprites, wind arrow paths
   * and a second grid on top of the chart. The purpose of the demo is to inpire
   * developers to go beyond the basic chart types and show how the library can
   * be extended programmatically. This is what the demo does:
   *
   * - Loads weather forecast from www.yr.no in form of a JSON service.
   * - When the data arrives async, a Meteogram instance is created. We have
   *   created the Meteogram prototype to provide an organized structure of the
   *   different methods and subroutines associated with the demo.
   * - The parseYrData method parses the data from www.yr.no into several parallel
   *   arrays. These arrays are used directly as the data option for temperature,
   *   precipitation and air pressure.
   * - After this, the options structure is built, and the chart generated with
   *   the parsed data.
   * - On chart load, weather icons and the frames for the wind arrows are
   *   rendered using custom logic.
   */
  
  function Meteogram(json, container) {
      // Parallel arrays for the chart data, these are populated as the JSON file
      // is loaded
      this.symbols = [];
      this.precipitations = [];
      this.precipitationsError = []; // Only for some data sets
      this.winds = [];
      this.temperatures = [];
      this.pressures = [];
  
      // Initialize
      this.json = json;
      this.container = container;
  
      // Run
      this.parseYrData();
  }
  
  /**
   * Mapping of the symbol code in yr.no's API to the icons in their public
   * GitHub repo, as well as the text used in the tooltip.
   *
   * https://api.met.no/weatherapi/weathericon/2.0/documentation
   */
  Meteogram.dictionary = {
      clearsky: {
          symbol: '01',
          text: 'Clear sky'
      },
      fair: {
          symbol: '02',
          text: 'Fair'
      },
      partlycloudy: {
          symbol: '03',
          text: 'Partly cloudy'
      },
      cloudy: {
          symbol: '04',
          text: 'Cloudy'
      },
      lightrainshowers: {
          symbol: '40',
          text: 'Light rain showers'
      },
      rainshowers: {
          symbol: '05',
          text: 'Rain showers'
      },
      heavyrainshowers: {
          symbol: '41',
          text: 'Heavy rain showers'
      },
      lightrainshowersandthunder: {
          symbol: '24',
          text: 'Light rain showers and thunder'
      },
      rainshowersandthunder: {
          symbol: '06',
          text: 'Rain showers and thunder'
      },
      heavyrainshowersandthunder: {
          symbol: '25',
          text: 'Heavy rain showers and thunder'
      },
      lightsleetshowers: {
          symbol: '42',
          text: 'Light sleet showers'
      },
      sleetshowers: {
          symbol: '07',
          text: 'Sleet showers'
      },
      heavysleetshowers: {
          symbol: '43',
          text: 'Heavy sleet showers'
      },
      lightsleetshowersandthunder: {
          symbol: '26',
          text: 'Light sleet showers and thunder'
      },
      sleetshowersandthunder: {
          symbol: '20',
          text: 'Sleet showers and thunder'
      },
      heavysleetshowersandthunder: {
          symbol: '27',
          text: 'Heavy sleet showers and thunder'
      },
      lightsnowshowers: {
          symbol: '44',
          text: 'Light snow showers'
      },
      snowshowers: {
          symbol: '08',
          text: 'Snow showers'
      },
      heavysnowshowers: {
          symbol: '45',
          text: 'Heavy show showers'
      },
      lightsnowshowersandthunder: {
          symbol: '28',
          text: 'Light snow showers and thunder'
      },
      snowshowersandthunder: {
          symbol: '21',
          text: 'Snow showers and thunder'
      },
      heavysnowshowersandthunder: {
          symbol: '29',
          text: 'Heavy snow showers and thunder'
      },
      lightrain: {
          symbol: '46',
          text: 'Light rain'
      },
      rain: {
          symbol: '09',
          text: 'Rain'
      },
      heavyrain: {
          symbol: '10',
          text: 'Heavy rain'
      },
      lightrainandthunder: {
          symbol: '30',
          text: 'Light rain and thunder'
      },
      rainandthunder: {
          symbol: '22',
          text: 'Rain and thunder'
      },
      heavyrainandthunder: {
          symbol: '11',
          text: 'Heavy rain and thunder'
      },
      lightsleet: {
          symbol: '47',
          text: 'Light sleet'
      },
      sleet: {
          symbol: '12',
          text: 'Sleet'
      },
      heavysleet: {
          symbol: '48',
          text: 'Heavy sleet'
      },
      lightsleetandthunder: {
          symbol: '31',
          text: 'Light sleet and thunder'
      },
      sleetandthunder: {
          symbol: '23',
          text: 'Sleet and thunder'
      },
      heavysleetandthunder: {
          symbol: '32',
          text: 'Heavy sleet and thunder'
      },
      lightsnow: {
          symbol: '49',
          text: 'Light snow'
      },
      snow: {
          symbol: '13',
          text: 'Snow'
      },
      heavysnow: {
          symbol: '50',
          text: 'Heavy snow'
      },
      lightsnowandthunder: {
          symbol: '33',
          text: 'Light snow and thunder'
      },
      snowandthunder: {
          symbol: '14',
          text: 'Snow and thunder'
      },
      heavysnowandthunder: {
          symbol: '34',
          text: 'Heavy snow and thunder'
      },
      fog: {
          symbol: '15',
          text: 'Fog'
      }
  };
  
  /**
   * Draw the weather symbols on top of the temperature series. The symbols are
   * fetched from yr.no's MIT licensed weather symbol collection.
   * https://github.com/YR/weather-symbols
   */
  Meteogram.prototype.drawWeatherSymbols = function (chart) {
  
      chart.series[0].data.forEach((point, i) => {
          if (this.resolution > 36e5 || i % 2 === 0) {
  
              const [symbol, specifier] = this.symbols[i].split('_'),
                  icon = Meteogram.dictionary[symbol].symbol +
                      ({ day: 'd', night: 'n' }[specifier] || '');
  
              if (Meteogram.dictionary[symbol]) {
                  chart.renderer
                      .image(
                          'https://cdn.jsdelivr.net/gh/nrkno/yr-weather-symbols' +
                              `@8.0.1/dist/svg/${icon}.svg`,
                          point.plotX + chart.plotLeft - 8,
                          point.plotY + chart.plotTop - 30,
                          30,
                          30
                      )
                      .attr({
                          zIndex: 5
                      })
                      .add();
              } else {
                  console.log(symbol);
              }
          }
      });
  };
  
  
  /**
   * Draw blocks around wind arrows, below the plot area
   */
  Meteogram.prototype.drawBlocksForWindArrows = function (chart) {
      const xAxis = chart.xAxis[0];
  
      for (
          let pos = xAxis.min, max = xAxis.max, i = 0;
          pos <= max + 36e5; pos += 36e5,
          i += 1
      ) {
  
          // Get the X position
          const isLast = pos === max + 36e5,
              x = Math.round(xAxis.toPixels(pos)) + (isLast ? 0.5 : -0.5);
  
          // Draw the vertical dividers and ticks
          const isLong = this.resolution > 36e5 ?
              pos % this.resolution === 0 :
              i % 2 === 0;
  
          chart.renderer
              .path([
                  'M', x, chart.plotTop + chart.plotHeight + (isLong ? 0 : 28),
                  'L', x, chart.plotTop + chart.plotHeight + 32,
                  'Z'
              ])
              .attr({
                  stroke: chart.options.chart.plotBorderColor,
                  'stroke-width': 1
              })
              .add();
      }
  
      // Center items in block
      chart.get('windbarbs').markerGroup.attr({
          translateX: chart.get('windbarbs').markerGroup.translateX + 8
      });
  
  };
  
  /**
   * Build and return the Highcharts options structure
   */
  Meteogram.prototype.getChartOptions = function () {
      return {
          chart: {
              renderTo: this.container,
              marginBottom: 70,
              marginRight: 40,
              marginTop: 50,
              plotBorderWidth: 1,
              height: 310,
              alignTicks: false,
              scrollablePlotArea: {
                  minWidth: 720
              }
          },
  
          defs: {
              patterns: [{
                  id: 'precipitation-error',
                  path: {
                      d: [
                          'M', 3.3, 0, 'L', -6.7, 10,
                          'M', 6.7, 0, 'L', -3.3, 10,
                          'M', 10, 0, 'L', 0, 10,
                          'M', 13.3, 0, 'L', 3.3, 10,
                          'M', 16.7, 0, 'L', 6.7, 10
                      ].join(' '),
                      stroke: '#68CFE8',
                      strokeWidth: 1
                  }
              }]
          },
  
          title: {
              text: 'Pronostico Climatologico',
              align: 'left',
              style: {
                  whiteSpace: 'nowrap',
                  textOverflow: 'ellipsis'
              }
          },
  
          credits: {
              text: 'Pronostico por <a href="https://yr.no">yr.no</a>',
              href: 'https://yr.no',
              position: {
                  x: -40
              }
          },
  
          tooltip: {
              shared: true,
              useHTML: true,
              headerFormat:
                  '<small>{point.x:%A, %b %e, %H:%M} - {point.point.to:%H:%M}</small><br>' +
                  '<b>{point.point.symbolName}</b><br>'
  
          },
  
          xAxis: [{ // Bottom X axis
              type: 'datetime',
              tickInterval: 2 * 36e5, // two hours
              minorTickInterval: 36e5, // one hour
              tickLength: 0,
              gridLineWidth: 1,
              gridLineColor: 'rgba(128, 128, 128, 0.1)',
              startOnTick: false,
              endOnTick: false,
              minPadding: 0,
              maxPadding: 0,
              offset: 30,
              showLastLabel: true,
              labels: {
                  format: '{value:%H}'
              },
              crosshair: true
          }, { // Top X axis
              linkedTo: 0,
              type: 'datetime',
              tickInterval: 24 * 3600 * 1000,
              labels: {
                  format: '{value:<span style="font-size: 12px; font-weight: bold">%a</span> %b %e}',
                  align: 'left',
                  x: 3,
                  y: 8
              },
              opposite: true,
              tickLength: 20,
              gridLineWidth: 1
          }],
  
          yAxis: [{ // temperature axis
              title: {
                  text: null
              },
              labels: {
                  format: '{value}°',
                  style: {
                      fontSize: '10px'
                  },
                  x: -3
              },
              plotLines: [{ // zero plane
                  value: 0,
                  color: '#BBBBBB',
                  width: 1,
                  zIndex: 2
              }],
              maxPadding: 0.3,
              minRange: 8,
              tickInterval: 1,
              gridLineColor: 'rgba(128, 128, 128, 0.1)'
  
          }, { // precipitation axis
              title: {
                  text: null
              },
              labels: {
                  enabled: false
              },
              gridLineWidth: 0,
              tickLength: 0,
              minRange: 10,
              min: 0
  
          }, { // Air pressure
              allowDecimals: false,
              title: { // Title on top of axis
                  text: 'hPa',
                  offset: 0,
                  align: 'high',
                  rotation: 0,
                  style: {
                      fontSize: '10px',
                      color: Highcharts.getOptions().colors[2]
                  },
                  textAlign: 'left',
                  x: 3
              },
              labels: {
                  style: {
                      fontSize: '8px',
                      color: Highcharts.getOptions().colors[2]
                  },
                  y: 2,
                  x: 3
              },
              gridLineWidth: 0,
              opposite: true,
              showLastLabel: false
          }],
  
          legend: {
              enabled: false
          },
  
          plotOptions: {
              series: {
                  pointPlacement: 'between'
              }
          },
  
  
          series: [{
              name: 'Temperature',
              data: this.temperatures,
              type: 'spline',
              marker: {
                  enabled: false,
                  states: {
                      hover: {
                          enabled: true
                      }
                  }
              },
              tooltip: {
                  pointFormat: '<span style="color:{point.color}">\u25CF</span> ' +
                      '{series.name}: <b>{point.y}°C</b><br/>'
              },
              zIndex: 1,
              color: '#FF3333',
              negativeColor: '#48AFE8'
          }, {
              name: 'Precipitation',
              data: this.precipitationsError,
              type: 'column',
              color: 'url(#precipitation-error)',
              yAxis: 1,
              groupPadding: 0,
              pointPadding: 0,
              tooltip: {
                  valueSuffix: ' mm',
                  pointFormat: '<span style="color:{point.color}">\u25CF</span> ' +
                      '{series.name}: <b>{point.minvalue} mm - {point.maxvalue} mm</b><br/>'
              },
              grouping: false,
              dataLabels: {
                  enabled: this.hasPrecipitationError,
                  filter: {
                      operator: '>',
                      property: 'maxValue',
                      value: 0
                  },
                  style: {
                      fontSize: '8px',
                      color: 'gray'
                  }
              }
          }, {
              name: 'Precipitation',
              data: this.precipitations,
              type: 'column',
              color: '#68CFE8',
              yAxis: 1,
              groupPadding: 0,
              pointPadding: 0,
              grouping: false,
              dataLabels: {
                  enabled: !this.hasPrecipitationError,
                  filter: {
                      operator: '>',
                      property: 'y',
                      value: 0
                  },
                  style: {
                      fontSize: '8px',
                      color: 'gray'
                  }
              },
              tooltip: {
                  valueSuffix: ' mm'
              }
          }, {
              name: 'Air pressure',
              color: Highcharts.getOptions().colors[2],
              data: this.pressures,
              marker: {
                  enabled: false
              },
              shadow: false,
              tooltip: {
                  valueSuffix: ' hPa'
              },
              dashStyle: 'shortdot',
              yAxis: 2
          }, {
              name: 'Wind',
              type: 'windbarb',
              id: 'windbarbs',
              color: Highcharts.getOptions().colors[1],
              lineWidth: 1.5,
              data: this.winds,
              vectorLength: 18,
              yOffset: -15,
              tooltip: {
                  valueSuffix: ' m/s'
              }
          }]
      };
  };
  
  /**
   * Post-process the chart from the callback function, the second argument
   * Highcharts.Chart.
   */
  Meteogram.prototype.onChartLoad = function (chart) {
  
      this.drawWeatherSymbols(chart);
      this.drawBlocksForWindArrows(chart);
  
  };
  
  /**
   * Create the chart. This function is called async when the data file is loaded
   * and parsed.
   */
  Meteogram.prototype.createChart = function () {
      this.chart = new Highcharts.Chart(this.getChartOptions(), chart => {
          this.onChartLoad(chart);
      });
  };
  
  Meteogram.prototype.error = function () {
      document.getElementById('loading').innerHTML =
          '<i class="fa fa-frown-o"></i> Failed loading data, please try again later';
  };
  
  /**
   * Handle the data. This part of the code is not Highcharts specific, but deals
   * with yr.no's specific data format
   */
  Meteogram.prototype.parseYrData = function () {
  
      let pointStart;
  
      if (!this.json) {
          return this.error();
      }
  
      // Loop over hourly (or 6-hourly) forecasts
      this.json.properties.timeseries.forEach((node, i) => {
  
          const x = Date.parse(node.time),
              nextHours = node.data.next_1_hours || node.data.next_6_hours,
              symbolCode = nextHours && nextHours.summary.symbol_code,
              to = node.data.next_1_hours ? x + 36e5 : x + 6 * 36e5;
  
          if (to > pointStart + 48 * 36e5) {
              return;
          }
  
          // Populate the parallel arrays
          this.symbols.push(nextHours.summary.symbol_code);
  
          this.temperatures.push({
              x,
              y: node.data.instant.details.air_temperature,
              // custom options used in the tooltip formatter
              to,
              symbolName: Meteogram.dictionary[
                  symbolCode.replace(/_(day|night)$/, '')
              ].text
          });
  
          this.precipitations.push({
              x,
              y: nextHours.details.precipitation_amount
          });
  
          if (i % 2 === 0) {
              this.winds.push({
                  x,
                  value: node.data.instant.details.wind_speed,
                  direction: node.data.instant.details.wind_from_direction
              });
          }
  
          this.pressures.push({
              x,
              y: node.data.instant.details.air_pressure_at_sea_level
          });
  
          if (i === 0) {
              pointStart = (x + to) / 2;
          }
      });
  
      // Create the chart when the data is loaded
      this.createChart();
  };
  // End of the Meteogram protype
  
  
  // On DOM ready...
  
  // Set the hash to the yr.no URL we want to parse
  if (!location.hash) {
      location.hash = 'https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=30&lat=10.525619&lon=-85.55603';
  }
  
  const url = location.hash.substr(1);
  Highcharts.ajax({
      url,
      dataType: 'json',
      success: json => {
          window.meteogram = new Meteogram(json, 'container');
      },
      error: Meteogram.prototype.error,
      headers: {
          // Override the Content-Type to avoid preflight problems with CORS
          // in the Highcharts demos
          'Content-Type': 'text/plain'
      }
  });
  
  </script>

  </body>

</html>
